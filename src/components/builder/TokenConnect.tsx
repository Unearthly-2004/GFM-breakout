
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Coins, Plus, Link, RefreshCw } from "lucide-react";
import { toast } from "@/components/ui/use-toast";

interface TokenConnectProps {
  onTokenConnect: (tokenDetails: { name: string; address: string; type: string }) => void;
}

const TokenConnect: React.FC<TokenConnectProps> = ({ onTokenConnect }) => {
  const [isExisting, setIsExisting] = useState(true);
  const [tokenName, setTokenName] = useState("");
  const [tokenAddress, setTokenAddress] = useState("");
  const [tokenType, setTokenType] = useState("gfm");
  const [isConnecting, setIsConnecting] = useState(false);

  const handleConnect = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isExisting && !tokenAddress) {
      toast({
        title: "Error",
        description: "Please enter a token address.",
        variant: "destructive"
      });
      return;
    }
    
    if (!isExisting && !tokenName) {
      toast({
        title: "Error",
        description: "Please enter a name for your new token.",
        variant: "destructive"
      });
      return;
    }
    
    setIsConnecting(true);
    
    try {
      if (isExisting) {
        onTokenConnect({ 
          name: "", // Will be populated by the GFM SDK
          address: tokenAddress,
          type: tokenType 
        });
      } else {
        onTokenConnect({ 
          name: tokenName, 
          address: "", // Will be generated by the GFM SDK
          type: tokenType 
        });
      }
    } catch (error) {
      console.error("Token connection error:", error);
      toast({
        title: "Error",
        description: "Failed to connect or create token.",
        variant: "destructive"
      });
    } finally {
      setIsConnecting(false);
    }
  };

  return (
    <div className="bg-secondary/50 p-6 rounded-xl border">
      <div className="mb-6 flex items-center justify-between">
        <h3 className="text-xl font-bold flex items-center gap-2">
          <Coins className="w-5 h-5 text-primary" />
          Connect Token
        </h3>
        
        <div className="flex items-center bg-background rounded-lg p-1 border">
          <Button 
            variant={isExisting ? "default" : "ghost"}
            size="sm"
            className={isExisting ? "gradient-bg border-0 text-white" : ""}
            onClick={() => setIsExisting(true)}
          >
            <Link className="mr-2 h-4 w-4" />
            Connect Existing
          </Button>
          <Button 
            variant={!isExisting ? "default" : "ghost"}
            size="sm"
            className={!isExisting ? "gradient-bg border-0 text-white" : ""}
            onClick={() => setIsExisting(false)}
          >
            <Plus className="mr-2 h-4 w-4" />
            Create New
          </Button>
        </div>
      </div>
      
      <form onSubmit={handleConnect}>
        <div className="space-y-4">
          <div>
            <label htmlFor="token-type" className="block text-sm font-medium mb-1">
              Token Type
            </label>
            <Select defaultValue={tokenType} onValueChange={setTokenType}>
              <SelectTrigger id="token-type">
                <SelectValue placeholder="Select token type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="gfm">GFM Token</SelectItem>
                <SelectItem value="spl">SPL Token</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {isExisting ? (
            <div>
              <label htmlFor="token-address" className="block text-sm font-medium mb-1">
                Token Address
              </label>
              <Input
                id="token-address"
                placeholder="Enter GFM token address"
                value={tokenAddress}
                onChange={(e) => setTokenAddress(e.target.value)}
              />
              <p className="text-xs text-muted-foreground mt-1">
                Enter the address of your existing GFM token
              </p>
            </div>
          ) : (
            <div>
              <label htmlFor="token-name" className="block text-sm font-medium mb-1">
                Token Name
              </label>
              <Input
                id="token-name"
                placeholder="e.g., MyApp Token"
                value={tokenName}
                onChange={(e) => setTokenName(e.target.value)}
              />
              <p className="text-xs text-muted-foreground mt-1">
                This will create a new GFM token with a bonding curve
              </p>
            </div>
          )}
        </div>
        
        <Button 
          type="submit" 
          className="w-full mt-6"
          disabled={isConnecting}
        >
          {isConnecting ? (
            <>
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
              {isExisting ? "Connecting..." : "Creating..."}
            </>
          ) : (
            isExisting ? "Connect Token" : "Create & Connect Token"
          )}
        </Button>
      </form>
    </div>
  );
};

export default TokenConnect;
